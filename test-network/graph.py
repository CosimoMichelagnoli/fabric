# -*- coding: utf-8 -*-
import matplotlib.pyplot as plt
'''
import matplotlib.colors
import numpy as np
import matplotlib.pyplot as plt
from matplotlib.ticker import (LinearLocator, MultipleLocator, FormatStrFormatter, AutoMinorLocator, LogLocator)
c="android"
print(matplotlib.__version__)
#families = [r'$\textrm{Benign}$', r'$\textrm{Ramnit}$', r'$\textrm{Zbot}$', r'$\textrm{IcedId}$', r'$\textrm{Trickbot}$', r'$\textrm{Virlock}$', r'$\textrm{Stop}$', r'$\textrm{Magniber}$', r'$\textrm{Wannacry}$']
families = [r'$\textrm{Svpeng}$', r'$\textrm{Anubis}$', r'$\textrm{Asacub}$', r'$\textrm{Hqwar}$', r'$\textrm{Ewind}$', r'$\textrm{HiddenAd}$', r'$\textrm{Kuguo}$']

total_count = [961, 1500, 1200, 1000, 800, 800, 1000, 808, 1533]
android_count = [23, 46, 29, 179, 10, 288, 100]

byte_count = [960, 1500, 1186, 999, 800, 800, 1000, 806, 1528]
api_count = [956, 1499, 1166, 861, 725, 744, 1000, 806, 1445]
entropy_count = [956, 1500, 1193, 1000, 800, 800, 1000, 808, 1527]
dynamic_count = [200 for _ in families]
combined_count = [955, 1499, 1159, 860, 725, 744, 1000, 804, 1444]

g = {"android":android_count, "whole":total_count, "byte":byte_count, "api":api_count, "entropy":entropy_count, "dynamic":dynamic_count, "combined":combined_count}

count=g[c]
print("Preparing bar chart for the " + c + " dataset")

labels = [r'$\textrm{ - ' + str(x) + r' \%}$' for x in count]

colors = [x/500 + 0.4 for x in count]
print(colors)

#Dimensioni
BIG=22
SMALL=18
ymin=0
ymax=350
dy=50
#Questo comando serve per avere i label in formato LaTex (devi avere latex installato con pip)
plt.rcParams.update({"text.usetex":True,"font.family":"Helvetica"}) 

fig=plt.figure(figsize=(8.5,5.5), dpi=300)
ax=fig.add_subplot()
for i in range(len(families)):
    b = ax.bar(families[i], count[i], color='navy', alpha=colors[i])
    ax.bar_label(b, label=labels[i], label_type='edge')

ax.tick_params(axis='both', which='both', direction='in', labelsize=SMALL) #Tick rivolti verso l'interno
ax.set_ylim(ymin,ymax)
ax.set_yticks(np.arange(ymin,ymax,dy), fontsize=SMALL)
ax.yaxis.set_major_locator(MultipleLocator(dy))   #Questi deu comandi servono
ax.yaxis.set_minor_locator(MultipleLocator(dy/2)) #per inserire i tick minori
ax.set_ylabel(r"$\textrm{NÂ° of samples}$", fontsize=BIG)
ax.set_xticklabels(families, rotation=45, ha='right', rotation_mode='anchor', fontsize=SMALL)
ax.set_xlabel(r'$\textrm{Family}$', fontsize=BIG)
plt.subplots_adjust(bottom=0.3)

ax_r=ax.twinx() #Serve a mettere i tick anche a destra
ax_r.tick_params(which='both', axis='both', direction='in', labelcolor='none', labelsize=SMALL)
ax_r.set_ylim(ymin,ymax)
ax_r.set_yticks(np.arange(ymin,ymax,dy), fontsize=SMALL)
ax_r.yaxis.set_major_locator(MultipleLocator(dy))
ax_r.yaxis.set_minor_locator(MultipleLocator(dy/2))

fig.savefig(c + "_familycount.pdf", bbox_inches='tight', facecolor='w', edgecolor='w')
'''
names = ['ECDSA', 'Dilithium', 'Falcon']
tempoFabricNetGen = [9.150441681034863, 8.837452775798738, 8.237438620999455, 9.581151499412954, 9.556129519827664, 8.278085643425584, 9.158395101316273, 9.31041407212615, 8.51414233352989, 8.875112908892334, 7.972555886022747, 9.554886340163648, 9.873302899301052, 10.165702622383833, 8.62516026943922, 9.72081794962287, 9.882748792879283, 9.053270237520337, 10.238671435974538, 9.694179598242044, 8.268849144689739, 9.90527880564332, 8.741535035893321, 8.33139412663877, 10.235684555023909, 8.29696477111429, 9.804352086037397, 10.512397580780089, 10.179991414770484, 10.60274575650692, 8.142678245902061, 9.517692220397294, 8.489936609752476, 7.30880309920758, 9.312053240835667, 9.13831366226077, 9.308377059176564, 9.881456257775426, 10.33958203997463, 9.2163605382666, 9.39913157839328, 9.26033487636596, 8.390438362024724, 9.972221955657005, 9.337165075354278, 9.33311234973371, 9.07373203523457, 9.527967857196927, 9.755469045601785]
tempoDilithiumNetGen = [10.529888887889683, 10.239522092975676, 9.073156040161848, 8.045017414726317, 10.678897867910564, 10.16544210165739, 10.429592677392066, 9.344260578043759, 10.336259169504046, 9.552534835413098, 9.648876963183284, 8.684612791985273, 9.732092999853194, 8.992940172553062, 10.612263028509915, 8.29384483024478, 10.586106021888554, 9.182748023420572, 9.54487947653979, 11.422929006628692, 10.19549104385078, 9.678222832269967, 9.508743401616812, 11.269294066354632, 9.43055281136185, 11.205636132508516, 8.456914070993662, 10.301479923538864, 8.885898609645665, 8.876748413778841, 11.779216848313808, 8.682948467321694, 10.448541502468288, 10.08392605278641, 9.281309455633163, 11.140227584168315, 10.407924002036452, 9.336955561302602, 8.951610825024545, 9.259952853433788, 11.056553963571787, 9.656406349502504, 11.472798547707498, 10.389863491989672, 10.64120214432478, 11.561778481118381, 10.159797376021743, 10.012046554125845, 9.469844304025173]
tempoFalconNetGen = [10.851917639374733, 10.860164133831859, 10.364255091175437, 11.595919765532017, 11.056901240721345, 9.599966764450073, 9.47788535989821, 9.563651043921709, 9.227069191634655, 12.05262291058898, 11.781096573919058, 9.688341055065393, 9.754316421225667, 11.138528568670154, 8.878912419080734, 12.085982155054808, 11.16394486837089, 12.117975076660514, 9.307893404737115, 10.726373583078384, 8.979888278990984, 9.50632069632411, 11.545537147670984, 9.878532517701387, 10.603050196543336, 9.750060616061091, 10.164898755028844, 9.294038482010365, 10.219328992068768, 10.131942197680473, 9.770332653075457, 9.370396876707673, 10.539247550070286, 9.187678633257747, 10.616012495011091, 9.362606029957533, 11.503028742969036, 9.966645739972591, 9.725512998178601, 10.755970986559987, 10.684670319780707, 10.26215374469757, 9.807477941736579, 9.697320237755775, 9.986277624964714, 10.60786498337984, 14.13676860369742, 9.76057200692594, 9.726477729156613]

tempoFabricCh = [11.274735072627664, 11.15842261351645, 11.170562805607915, 11.137679195962846, 11.233853003010154, 11.291627847589552, 11.306716077029705, 11.12603053636849, 11.427652480080724, 11.310633645392954, 11.215234967879951, 11.26423468068242, 11.233558488078415, 11.530911761336029, 11.238753695040941, 11.340167224407196, 11.16369154676795, 11.303659314289689, 11.231886361725628, 11.184597049839795, 11.342180070467293, 11.283476484008133, 11.227507121860981, 11.3140220195055, 11.364563169889152, 11.19495761860162, 11.212921658530831, 11.275306707248092, 11.21705556102097, 11.30883504729718, 11.15300518553704, 11.280804338864982, 11.257756505161524, 11.366061027161777, 11.26239041145891, 11.329740446060896, 11.333300616592169, 11.196367737837136, 11.354703999124467, 11.216876030899584, 11.158833157271147, 11.245784257538617, 11.26465209107846, 11.205149477347732, 11.148991490714252, 11.181157186627388, 11.247077971696854, 11.2711211014539, 11.05210111103952]
tempoDilithiumCh = [12.241013255901635, 12.280270682647824, 12.339324787259102, 12.151020628400147, 12.19775273092091, 12.35302307549864, 12.294890037737787, 12.31649097893387, 12.320110219530761, 12.361747936345637, 12.464242598041892, 12.211029568687081, 12.36130144726485, 12.364805224351585, 12.380575860850513, 12.477760925889015, 12.38993845693767, 12.29699235688895, 12.307853722944856, 12.261390376836061, 12.30486667342484, 12.338983591645956, 12.355847785249352, 12.396232343278825, 12.369522311724722, 12.305992832407355, 12.335852990858257, 12.454963530413806, 12.278015615418553, 12.38690113183111, 12.278432516381145, 12.26957667991519, 12.331465360708535, 12.321932663209736, 12.104788245633245, 12.273065746761858, 12.31055936217308, 12.363775701262057, 12.389247866347432, 12.312621062621474, 12.494668656028807, 12.43120020441711, 12.426773495040834, 12.398359034210443, 12.477054172195494, 12.217219314537942, 12.304028222337365, 12.30113695282489, 12.316610941663384]
tempoFalconCh = [11.991761228069663, 11.97936288267374, 11.904836568981409, 12.086273157969117, 12.0849334821105, 12.195488715544343, 12.06092468649149, 12.022441955283284, 12.02589189261198, 12.122781988233328, 12.058334957808256, 12.040864126756787, 12.037258571013808, 12.10109455510974, 11.985328044742346, 11.927313767373562, 11.980554418638349, 11.902559112757444, 50, 11.847985748201609, 12.070426885038614, 11.954846825450659, 12.007525153458118, 12.022829940542579, 12.080221371725202, 11.983904045075178, 11.931152869015932, 11.98094422928989, 11.99074430204928, 11.938366375863552, 11.953264318406582, 12.05573769658804, 12.025935184210539, 11.941290885210037, 11.867013715207577, 12.060606300830841, 12.00831849500537, 11.94304883107543, 12.020790107548237, 12.04906950891018, 12.060693705454469, 12.048849169164896, 12.175073018297553, 11.96794681251049, 12.086498560383916, 12.052627371624112, 12.022383879870176, 11.992418566718698, 12.045323852449656]
valuesNetGen = [sum(tempoFabricNetGen) / len(tempoFabricNetGen), sum(tempoDilithiumNetGen) / len(tempoDilithiumNetGen), sum(tempoFalconNetGen) / len(tempoFalconNetGen)]
valuesNetCh = [sum(tempoFabricCh) / len(tempoFabricCh), sum(tempoDilithiumCh) / len(tempoDilithiumCh), sum(tempoFalconCh) / len(tempoFalconCh)]

print(valuesNetGen)
print(valuesNetCh)
'''
plt.figure(figsize=(9, 3))

plt.subplot(131)
plt.bar(names, valuesNetGen)
plt.subplot(132)
plt.bar(names, valuesNetCh)
plt.savefig('prova.png')
'''